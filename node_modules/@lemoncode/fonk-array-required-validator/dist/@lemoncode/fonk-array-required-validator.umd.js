(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@lemoncode/fonk')) :
  typeof define === 'function' && define.amd ? define(['exports', '@lemoncode/fonk'], factory) :
  (global = global || self, factory(global['@lemoncode/fonk-array-required-validator'] = {}, global.Fonk));
}(this, (function (exports, fonk) { 'use strict';

  var VALIDATOR_TYPE = 'ARRAY_REQUIRED';
  var defaultMessage = 'The list should have items';
  var setErrorMessage = function setErrorMessage(message) {
    return defaultMessage = message;
  };
  var defaultCustomArgs = {
    minLength: 1
  };

  var validateType = function validateType(value) {
    return Array.isArray(value);
  };

  var validate = function validate(value, args) {
    return value.length >= args.minLength && (args.maxLength ? value.length <= args.maxLength : true);
  };

  var isDefined = function isDefined(value) {
    return value !== void 0 && value !== null && value !== '';
  };

  var validator = function validator(fieldValidatorArgs) {
    var value = fieldValidatorArgs.value,
        _fieldValidatorArgs$m = fieldValidatorArgs.message,
        message = _fieldValidatorArgs$m === void 0 ? defaultMessage : _fieldValidatorArgs$m,
        customArgs = fieldValidatorArgs.customArgs;
    var args = Object.assign(Object.assign({}, defaultCustomArgs), customArgs);
    var succeeded = !isDefined(value) || validateType(value) && validate(value, args);
    return {
      succeeded: succeeded,
      message: succeeded ? '' : fonk.parseMessageWithCustomArgs(message || defaultMessage, customArgs),
      type: VALIDATOR_TYPE
    };
  };

  var validator$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    setErrorMessage: setErrorMessage,
    validator: validator
  });

  exports.arrayRequired = validator$1;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

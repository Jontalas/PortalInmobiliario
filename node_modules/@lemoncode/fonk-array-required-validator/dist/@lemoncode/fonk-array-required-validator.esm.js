import { parseMessageWithCustomArgs } from '@lemoncode/fonk';

var VALIDATOR_TYPE = 'ARRAY_REQUIRED';
var defaultMessage = 'The list should have items';
var setErrorMessage = function setErrorMessage(message) {
  return defaultMessage = message;
};
var defaultCustomArgs = {
  minLength: 1
};

var validateType = function validateType(value) {
  return Array.isArray(value);
};

var validate = function validate(value, args) {
  return value.length >= args.minLength && (args.maxLength ? value.length <= args.maxLength : true);
};

var isDefined = function isDefined(value) {
  return value !== void 0 && value !== null && value !== '';
};

var validator = function validator(fieldValidatorArgs) {
  var value = fieldValidatorArgs.value,
      _fieldValidatorArgs$m = fieldValidatorArgs.message,
      message = _fieldValidatorArgs$m === void 0 ? defaultMessage : _fieldValidatorArgs$m,
      customArgs = fieldValidatorArgs.customArgs;
  var args = Object.assign(Object.assign({}, defaultCustomArgs), customArgs);
  var succeeded = !isDefined(value) || validateType(value) && validate(value, args);
  return {
    succeeded: succeeded,
    message: succeeded ? '' : parseMessageWithCustomArgs(message || defaultMessage, customArgs),
    type: VALIDATOR_TYPE
  };
};

var validator$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  setErrorMessage: setErrorMessage,
  validator: validator
});

export { validator$1 as arrayRequired };
